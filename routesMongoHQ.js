// Generated by CoffeeScript 1.3.3
(function() {
  var MongoDBConnector, daoObj;

  MongoDBConnector = require("./daos/dao.js");

  daoObj = new MongoDBConnector('design_patterns', 'alex.mongohq.com', 10001);

  app.get('/api/patterns', function(req, res) {
    return daoObj.findAll(function(err, items) {
      return res.send(items);
    });
  });

  app.get('/api/patterns/count', function(req, res) {
    return daoObj.count(function(err, count) {
      return res.send(count.toString());
    });
  });

  app.get('/api/patterns/:id', function(req, res) {
    var intId;
    console.log("getting pattern...");
    console.log("req: " + req.params);
    intId = parseInt(req.params.id);
    console.log(intId);
    console.log("calling findById...");
    return daoObj.findById(intId, function(err, item) {
      console.log("result: " + item);
      if (err != null) {
        return res.send(500);
      } else {
        if (item != null) {
          return res.send(item);
        } else {
          return res.send(404);
        }
      }
    });
  });

  app.post('/api/patterns', function(req, res) {
    var new_pattern;
    new_pattern = {
      id: req.body.id,
      name: req.body.name,
      category: req.body.category,
      intent: req.body.intent,
      motivation: req.body.motivation,
      applicability: req.body.applicability,
      structure: req.body.structure
    };
    return daoObj.insert(new_pattern, function(err, docs) {
      return res.send(200);
    });
  });

  app.put('/api/patterns/:id', function(req, res) {
    var intId, updated_pattern;
    console.log("executing app.put");
    intId = parseInt(req.params.id);
    updated_pattern = {
      name: req.body.name,
      category: req.body.category,
      intent: req.body.intent,
      motivation: req.body.motivation,
      applicability: req.body.applicability,
      structure: req.body.structure
    };
    return daoObj.update(updated_pattern, function(err) {
      if (err != null) {
        return res.send(404);
      } else {
        return daoObj.findById(updated_pattern(intId, function(err, item) {
          return res.send(item);
        }));
      }
    });
  });

  app.del('/api/patterns/:id', function(req, res) {
    var intId;
    intId = parseInt(req.params.id);
    return daoObj["delete"](intId, function(err) {
      if (err != null) {
        return res.send(500);
      } else {
        return res.send(200);
      }
    });
  });

}).call(this);
