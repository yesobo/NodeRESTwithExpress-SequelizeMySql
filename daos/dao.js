// Generated by CoffeeScript 1.3.3
(function() {
  var MongoDBConnector, mongodb;

  mongodb = require('mongodb');

  /*
  Use:
  	connector = new MongoDBConnector 'design_patterns', 'alex.mongohq.com', 100001
  	connector.findAll (err, items) -> res.send items
  */


  module.exports = MongoDBConnector = (function() {
    var initTransaction;

    function MongoDBConnector(dbName, host, port) {
      this.dbName = dbName;
      this.host = host;
      this.port = port;
      this.db = new mongodb.Db(this.dbName, new mongodb.Server(this.host, this.port, {
        auto_reconnect: true
      }), {});
    }

    initTransaction = function(callback) {
      var privateDBName, privateDb;
      if (this.db._state === 'connected') {
        console.log("Conection opened");
        return this.db.collection(this.dbName, callback);
      } else {
        console.log("opening connection...");
        privateDb = this.db;
        privateDBName = this.dbName;
        return this.db.open(function(err, p_client) {
          if (err != null) {
            return console.log("ERROR opening connection: " + err);
          } else {
            console.log("connection opened");
            console.log("authenticating...");
            return privateDb.authenticate('admin', '1234', function(err) {
              console.log("autenticated!");
              return privateDb.collection(privateDBName, callback);
            });
          }
        });
      }
    };

    MongoDBConnector.prototype.findAll = function(callback) {
      return initTransaction.call(this, function(err, collection) {
        if (err != null) {
          console.log("ERROR!");
          return callback(err, null);
        } else {
          return collection.find().toArray(function(err, items) {
            return callback(err, items);
          });
        }
      });
    };

    MongoDBConnector.prototype.count = function(callback) {
      return initTransaction.call(this, function(err, collection) {
        if (err != null) {
          console.log("ERROR");
          return callback(err, null);
        } else {
          return collection.count(function(err, count) {
            return callback(err, count);
          });
        }
      });
    };

    MongoDBConnector.prototype.findById = function(pId, callback) {
      return initTransaction.call(this, function(err, collection) {
        if (err != null) {
          console.log("ERROR!");
          return callback(err, null);
        } else {
          return collection.findOne({
            id: pId
          }, function(err, item) {
            return callback(err, item);
          });
        }
      });
    };

    MongoDBConnector.prototype.insert = function(pattern, callback) {
      return initTransaction.call(this, function(err, collection) {
        if (err != null) {
          console.log("ERROR!");
          return callback(err, null);
        } else {
          return collection.insert(pattern, function(err, doc) {
            return callback(err, doc);
          });
        }
      });
    };

    MongoDBConnector.prototype.update = function(pattern, callback) {
      return initTransaction(function(err, collection) {
        return collection.update({
          id: pattern.id
        }, {
          $set: {
            name: pattern.name,
            category: pattern.category,
            intent: pattern.intent,
            motivation: pattern.motivation,
            applicability: pattern.applicability,
            structure: pattern.structure
          }
        }, function(err) {
          return callback(err, pattern);
        });
      });
    };

    MongoDBConnector.prototype["delete"] = function(pId, callback) {
      return initTransaction(function(err, collection) {
        return collection.remove({
          id: pId
        }, function(err, removed) {
          return callback(err, removed);
        });
      });
    };

    return MongoDBConnector;

  })();

}).call(this);
